"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _Query = _interopRequireDefault(require("./Query"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * The NestedEntity model module.
 * @module model/NestedEntity
 * @version 5.1.1
 */
var NestedEntity = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>NestedEntity</code>.
   * @alias module:model/NestedEntity
   */
  function NestedEntity() {
    _classCallCheck(this, NestedEntity);

    NestedEntity.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(NestedEntity, null, [{
    key: "initialize",
    value: function initialize(obj) {}
    /**
     * Constructs a <code>NestedEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NestedEntity} obj Optional instance to populate.
     * @return {module:model/NestedEntity} The populated <code>NestedEntity</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new NestedEntity();

        if (data.hasOwnProperty('id')) {
          obj['id'] = _Query["default"].constructFromObject(data['id']);

          if ('id' !== 'id') {
            Object.defineProperty(obj, 'id', {
              get: function get() {
                return obj['id'];
              }
            });
          }
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _Query["default"].constructFromObject(data['name']);

          if ('name' !== 'name') {
            Object.defineProperty(obj, 'name', {
              get: function get() {
                return obj['name'];
              }
            });
          }
        }

        if (data.hasOwnProperty('surface_forms.text')) {
          obj['surface_forms.text'] = _Query["default"].constructFromObject(data['surface_forms.text']);

          if ('surface_forms.text' !== 'surfaceFormsText') {
            Object.defineProperty(obj, 'surfaceFormsText', {
              get: function get() {
                return obj['surface_forms.text'];
              }
            });
          }
        }

        if (data.hasOwnProperty('sentiment')) {
          obj['sentiment'] = _Query["default"].constructFromObject(data['sentiment']);

          if ('sentiment' !== 'sentiment') {
            Object.defineProperty(obj, 'sentiment', {
              get: function get() {
                return obj['sentiment'];
              }
            });
          }
        }

        if (data.hasOwnProperty('element')) {
          obj['element'] = _Query["default"].constructFromObject(data['element']);

          if ('element' !== 'element') {
            Object.defineProperty(obj, 'element', {
              get: function get() {
                return obj['element'];
              }
            });
          }
        }

        if (data.hasOwnProperty('links.wikipedia')) {
          obj['links.wikipedia'] = _Query["default"].constructFromObject(data['links.wikipedia']);

          if ('links.wikipedia' !== 'linksWikipedia') {
            Object.defineProperty(obj, 'linksWikipedia', {
              get: function get() {
                return obj['links.wikipedia'];
              }
            });
          }
        }

        if (data.hasOwnProperty('links.wikidata')) {
          obj['links.wikidata'] = _Query["default"].constructFromObject(data['links.wikidata']);

          if ('links.wikidata' !== 'linksWikidata') {
            Object.defineProperty(obj, 'linksWikidata', {
              get: function get() {
                return obj['links.wikidata'];
              }
            });
          }
        }

        if (data.hasOwnProperty('stock_ticker')) {
          obj['stock_ticker'] = _Query["default"].constructFromObject(data['stock_ticker']);

          if ('stock_ticker' !== 'stockTicker') {
            Object.defineProperty(obj, 'stockTicker', {
              get: function get() {
                return obj['stock_ticker'];
              }
            });
          }
        }

        if (data.hasOwnProperty('type')) {
          obj['type'] = _Query["default"].constructFromObject(data['type']);

          if ('type' !== 'type') {
            Object.defineProperty(obj, 'type', {
              get: function get() {
                return obj['type'];
              }
            });
          }
        }
      }

      return obj;
    }
  }]);

  return NestedEntity;
}();
/**
 * @member {module:model/Query} id
 */


NestedEntity.prototype['id'] = undefined;
/**
 * @member {module:model/Query} name
 */

NestedEntity.prototype['name'] = undefined;
/**
 * @member {module:model/Query} surface_forms.text
 */

NestedEntity.prototype['surface_forms.text'] = undefined;
/**
 * @member {module:model/Query} sentiment
 */

NestedEntity.prototype['sentiment'] = undefined;
/**
 * @member {module:model/Query} element
 */

NestedEntity.prototype['element'] = undefined;
/**
 * @member {module:model/Query} links.wikipedia
 */

NestedEntity.prototype['links.wikipedia'] = undefined;
/**
 * @member {module:model/Query} links.wikidata
 */

NestedEntity.prototype['links.wikidata'] = undefined;
/**
 * @member {module:model/Query} stock_ticker
 */

NestedEntity.prototype['stock_ticker'] = undefined;
/**
 * @member {module:model/Query} type
 */

NestedEntity.prototype['type'] = undefined;
var _default = NestedEntity;
exports["default"] = _default;